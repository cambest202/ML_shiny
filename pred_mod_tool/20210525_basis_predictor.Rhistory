runApp('~/University/MRC_DTP_in_Precision_Medicine/Project/RA/Taser_data/Analysis/taser_metabolomics/ML_shiny/TaSER_Analysis_file_import')
runApp('~/University/MRC_DTP_in_Precision_Medicine/Project/RA/Taser_data/Analysis/taser_metabolomics/ML_shiny/pred_mod_tool')
library(ggplot2)
library(tidyverse)
library (readr)
library(PMCMRplus)
library (PMCMR)
library(ggpubr)
library (mosaic)
library (dplyr)
library (data.table)
library(reshape2)
library (gtools)
library(plyr)
library(limma)
library(ggrepel)
library(amap)
library(rstatix)
library(broom)
library(ggprism)
library(HDDesign)
library(caret)
library(rsample)
library(sandwich)
library(rpart)
library(rpart.plot)
library(randomForest)
library(RColorBrewer)
library(plotly)
library(purrr)
library(devtools)
library(e1071)
library(ggraph)
library(igraph)
library(pscl)
library(parallel)
library(doParallel)
library(ROCR)
library(pROC)
library(qvalue)
library(corrr)
library(ggcorrplot)
library(ape)
library(forcats)
library(epicalc)
library(MLeval)
library(DALEX)
library(ingredients)
library(ALEPlot)
#Helpful functions ------
`%notin%` <- Negate(`%in%`)
`%notlike%` <- Negate(`%like%`)
back_2_front <- function(df){
df <- df[,c(ncol(df),1:(ncol(df)-1))]
return(df)
}
# set working directory--------
setwd('/Users/cameronbest/University/MRC_DTP_in_Precision_Medicine/Project/RA/Taser_data/Analysis/taser_metabolomics')
# import files ----------
comb_ft_sel_id <- read.csv('20210521_AB_base_pred.csv',row.names = 1, header=TRUE)
# Functions for model development and evaluation -----
control <-trainControl(method="repeatedcv",
number=10,
summaryFunction = prSummary,
savePredictions = TRUE,
classProbs = TRUE,
verboseIter = TRUE)
limma_fun <- function(matrix_AB, no., var1, var2){
Group <- factor(colnames(matrix_AB), levels = c(`var1`, `var2`))
design <- model.matrix (~Group)
colnames(design) <- c('var1', 'var1vsvar2')
eset <- matrix_AB
fit <- lmFit(eset, design)
fit <- eBayes(fit)
toptable <- topTable(fit, coef = 'var1vsvar2', adjust = 'BH', number = no.)
toptable <- as.data.frame(toptable)
toptable$Peak_ID_Ion <- rownames(toptable)
toptable <- toptable[,c(ncol(toptable),1:(ncol(toptable)-1))]
#toptable <- inner_join(peak_metadata_sim, toptable, by='Peak_ID_Ion')
toptable$Sig <- 0
toptable$Sig <- ifelse(toptable$adj.P.Val <0.05, '< 0.05', '> 0.05')
toptable$Sig_Names <-0
toptable$Sig_Names <- ifelse(toptable$Sig =='< 0.05' ,toptable$Peak_ID_Ion, '')
return(toptable)
}
limma_ID <- function(limma_table){
limma_table_ID <- limma_table
limma_table_ID$Sig <- 0
limma_table_ID$Sig <- ifelse(limma_table_ID$adj.P.Val <0.05, '< 0.05', '> 0.05')
limma_table_ID$Sig_Peaks <- 0
limma_table_ID$Sig_Peaks <- ifelse(limma_table_ID$Sig =='< 0.05' & limma_table_ID$identification != '',                                      limma_table_ID$Peak_ID, '')
limma_table_ID$Sig_Names <-0
limma_table_ID$Sig_Names <- ifelse(limma_table_ID$Sig =='< 0.05' & limma_table_ID$identification != '',                                      limma_table_ID$Putative_Metabolite, '')
limma_table_ID%>%
subset(Putative_Metabolite != 'Sulfasalazine')%>%
subset(Putative_Metabolite != 'Galactonic/Gluconic acid')%>%
ggplot(aes(x=logFC, y=-log10(P.Value),
colour=Sig,
group=Sig)) +
geom_point (alpha=0.7) +
theme_minimal() +
labs (x='LogFC',
y='-Log p-value',
colour='Adjusted \np-value')+
geom_text_repel(aes(x = logFC, y = -log10(P.Value), label = Sig_Names),
box.padding =1,
size=2.5,
max.overlaps = Inf,
position = position_jitter(seed = 1),
arrow = arrow(length = unit(0.0015, "npc"))) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))+
scale_color_brewer(palette = "Set1",direction=-1)
}
qvals <- function(limma_table){
pi0 <- 2*mean(limma_table$P.Value > 0.05)
lfdrvals <- lfdr(limma_table$P.Value, pi0)
qobj <- qvalue(limma_table$P.Value)
hist(qobj)
}
pred_xgb <- function(subgroup_matrix){
# generates extreme gradient boosting model for prediction of responses using baseline metabolome (annotated)
# returns the model itself, the stats from the confusion matrix for validation and the roc data
subgroup_df <- subgroup_matrix[,-c(2:41)]
subgroup_df$Response <- as.factor(subgroup_df$Response)
set.seed(42)
index <- createDataPartition(subgroup_df$Response, p = 0.7, list = FALSE)
train_data <- subgroup_df[index, ]
test_data  <- subgroup_df[-index, ]
set.seed(42)
registerDoParallel(4,cores=4)
getDoParWorkers()
model_xgb <- train(Response~., data=train_data,
method="xgbTree",
metric='Accuracy',
trControl= trainControl(method="repeatedcv",
number=10,
savePredictions = TRUE,
classProbs = TRUE,
verboseIter = TRUE))
mod_plot <- plot(model_xgb)
var_imp <- varImp(model_xgb,20)
predictions <- predict(model_xgb, test_data)
con_matr <- confusionMatrix(predictions, test_data$Response)
con_stats <- con_matr$overall
pr <- prediction(as.numeric(predictions), as.numeric(test_data$Response))
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
auc <- performance(pr, measure = "auc")
auc_val <- auc@y.values[[1]]
result.predicted.prob <- predict(model_xgb, test_data, type="prob") # Prediction
result.roc <- roc(test_data$Response, result.predicted.prob$Good) # Draw ROC curve.
list_pred <- list(model_xgb, con_stats, result.roc)
return(list_pred)
}
feat_imp <- function(model){
# feature importance from the model generated.
# returns a df showing ranked features and the ggplot barplot showing features in order of importance
var_imp_base <- varImp(model[[1]])
var_imp_base <- var_imp_base[[1]]
var_imp_base$Putative_Metabolite <-  gsub("(.*)\\..*","\\1", rownames(var_imp_base))
var_imp_base$Putative_Metabolite <- gsub('`', '', var_imp_base$Putative_Metabolite)
var_imp_base <- subset(var_imp_base,var_imp_base$Overall > 0)
var_imp_base <- back_2_front(var_imp_base)
gg <- ggplot(var_imp_base, aes(x=Overall, y=reorder(Putative_Metabolite, Overall)))+
geom_col(aes(fill=Overall))+
theme_minimal()+
scale_fill_continuous(low='yellow', high='red')+
theme(legend.position = 'none')+
labs(x='Relative Importance',
y='Putative Metabolite')
listt <- list(var_imp_base, gg)
return(listt)
}
model_roc <- function(result.roc){
# takes the roc data from the model from pred_xgb and returns the ROC curve and AUC
auc <- paste('AUC:',round(result.roc$auc,2))
plot(result.roc, print.thres="best")
abline(v = 1, lty = 2)
abline(h = 1, lty = 2)
text(.90, .97, labels = "Ideal Model")
points(1,1, pch = "O", cex = 1.5)
text(x=0.2, y=0.3, labels=auc, size=3)
}
multi_mods_test <- function(train_data){
registerDoParallel(4)
getDoParWorkers()
start.time <- Sys.time()
# train the logistic regression model
#set.seed(42)
#modelLRM <- train(Response~., data=train_data, method="glmnet", family='binomial', trControl=control)
# train the SVM model
set.seed(42)
modelSvm <- train(Response~., data=train_data, method="svmRadial", trControl=control)
# train the RF model
set.seed(42)
model_rf <- train(Response~., data=train_data, method="rf", trControl=control)
# train the XGBoost model
set.seed(42)
model_xgb <- train(Response~., data=train_data, method="xgbTree", trControl=control)
# train the KNN model
set.seed(42)
model_knn <- train(Response~., data=train_data, method="knn", trControl=control)
# train the naive Bayes model
set.seed(42)
model_naivebayes <- train(Response~., data=train_data, method="naive_bayes", trControl=control)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
# collect resamples
results <- resamples(list(SVM = modelSvm, RF= model_rf,
XGBoost =model_xgb, KNN=model_knn,
Naive.Bayes= model_naivebayes)) #LRM= modelLRM))
# summarize the distributions
summary(results)
# boxplots of results
plott <- bwplot(results)
comp_roc <- evalm(list(modelSvm, model_rf,
model_xgb,  model_knn,
model_naivebayes), #modelLRM),
gnames=c('KNN', 'NB', 'RF', 'SVM', 'XGB'))
ml_eval_output <- as.data.frame(comp_roc$stdres)
ml_eval_output$Measure <- rownames(ml_eval_output)
ml_eval_output <- back_2_front(ml_eval_output)
ml_eval_output <- flextable_only(ml_eval_output)
listt <- list(plott, ml_eval_output)
return(listt)
}# test multiple models function
model_generation <-function(train_df, model){
set.seed(42)
registerDoParallel(4)
getDoParWorkers()
modell <- train(Response~., data=train_df,
method=model,
metric='Accuracy',
trControl= trainControl(method="repeatedcv",
number=10,
repeats=100,
summaryFunction=twoClassSummary,
#summaryFunction = prSummary, # only needed with imbalanced classification
savePredictions = TRUE,
classProbs = TRUE,
verboseIter = TRUE))
summary(modell)
plot(modell)
var_importance <- varImp(modell,20)
listt <- list(modell, var_importance)
return(listt)
}
variable_imp <- function(model_output){
var_importance <- model_output[[2]]
var_importance <- var_importance[[1]]
var_importance$Putative_Metabolite <- rownames(var_importance)
var_importance$Putative_Metabolite <- gsub("(.*)\\..*","\\1", var_importance$Putative_Metabolite)
var_importance$Putative_Metabolite <- gsub("`", "", var_importance$Putative_Metabolite)
var_importance <- subset(var_importance,var_importance$Overall > 0)
gg <- ggplot(var_importance, aes(x=Overall, y=reorder(Putative_Metabolite, Overall)))+
geom_col(aes(fill=Overall))+
theme_minimal()+
scale_fill_continuous(low='yellow', high='red')+
theme(legend.position = 'none')+
labs(x='Relative Importance',
y='Putative Metabolite')
listt <- list(var_importance, gg)
return(listt)
}
model_performance <- function(model, test_df){
predictions <- predict(model, test_df)
confusionMatrix(predictions, test_df$Response)
con_matr <- confusionMatrix(predictions, test_df$Response)
con_stats <- con_matr$overall
pr <- prediction(as.numeric(predictions), as.numeric(test_df$Response))
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
auc <- performance(pr, measure = "auc")
auc_val <- auc@y.values[[1]]
result.predicted.prob <- predict(model, test_df, type="prob") # Prediction
result.roc <- roc(test_df$Response, result.predicted.prob$Good) # Draw ROC curve.
list_pred <- list(model, con_stats, result.roc, con_matr)
return(list_pred)
} # assess model performance (output is model, confusion matrix + roc data)
model_roc <- function(result.roc){
# takes the roc data from the model from pred_xgb and returns the ROC curve and AUC
auc <- paste('AUC:',round(result.roc$auc,2))
plot(result.roc, print.thres="best")
abline(v = 1, lty = 2)
abline(h = 1, lty = 2)
text(.90, .97, labels = "Ideal Model")
points(1,1, pch = "O", cex = 1.5)
text(x=0.2, y=0.3, labels=auc, size=3)
}
flextable_only <- function(table){
table_flex <- flextable::flextable(table)%>%
#flextable::fontsize(size = 6)%>%
flextable::autofit()%>%
#flextable:: height( height = .5)%>%
flextable::theme_vanilla()
}
# model generation -----
set.seed(42)
index <- createDataPartition(comb_ft_sel_id$Response, p = 0.7, list = FALSE)
train_data <- comb_ft_sel_id[index, ]
test_data  <- comb_ft_sel_id[-index, ]
test_data_2 <- test_data[,-(2:4)]
test_data_2$Response <- as.factor(test_data_2$Response)
train_whole <- train_data[,-c(1:4)]
train_whole <- as.data.frame(t(train_whole))
train_whole$Putative_Metabolite <- rownames(train_whole)
train_whole <- back_2_front(train_whole)
train_whole <- train_whole[,-1]
train_whole <- as.data.frame(t(train_whole))
train_data_2 <- cbind.data.frame(train_data[1], train_whole)
train_data_2$Response <- as.factor(train_data_2$Response)
### Recursive feature elimination
options(warn=-1)
subsets <- c(1:5, 10, 15, 20)
set.seed(42)
ctrl <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
repeats = 50,
verbose = FALSE)
set.seed(42)
registerDoParallel(4)
getDoParWorkers()
lmProfile <- rfe(x=train_data_2[,-1], y=train_data_2$Response,
sizes = subsets,
rfeControl = ctrl)
lmProfile$optVariables
var_imp_RFE <- lmProfile$variables
var_imp_RFE <- subset(var_imp_RFE, var_imp_RFE$Overall > 1.5)
var_imp_RFE <- distinct(var_imp_RFE, var, .keep_all=TRUE)
var_imp_RFE <- with(var_imp_RFE,var_imp_RFE[order(-Overall),])
var_imp_RFE <- subset(var_imp_RFE,var_imp_RFE$var != 'Galactonic/Gluconic acid')
var_imp_RFE <- subset(var_imp_RFE,var_imp_RFE$var != 'Ribonic acid?')
var_imp_RFE <- subset(var_imp_RFE,var_imp_RFE$var != 'Maleic acid')
var_imp_RFE <- head(var_imp_RFE, 10)
ggplot(var_imp_RFE, aes(x=Overall, y=reorder(var, Overall)))+
geom_col(aes(fill=Overall))+
theme_minimal()+
scale_fill_continuous(low='light green', high='navy')+
theme(legend.position = 'none',
axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 12))+
labs(x='Relative Importance',
y='Putative Metabolite')
names(comb_ft_sel_id)
tryp <- c('Indolelactic..acid','L.Tryptophan', 'Indoleacrylic.acid',
'X3.Methylindole', 'X5.Hydroxytryptophan', 'X5.Hydroxytryptophol',
'Indoleacetic.acid', 'L.Kynurenine', 'Serotonin'          )
# refine model using RFE metabolites-----
train_ref <- train_data[,-c(1:4)]
train_ref <- as.data.frame(t(train_ref))
train_ref$Putative_Metabolite <- rownames(train_ref)
train_ref <- back_2_front(train_ref)
train_ref <- subset(train_ref,train_ref$Putative_Metabolite %in% var_imp_RFE$var)
train_ref <- train_ref[,-1]
train_ref <- as.data.frame(t(train_ref))
train_data_2 <- cbind.data.frame(train_data[1], train_ref)
train_data_2$Response <- as.factor(train_data_2$Response)
train_data_2[2:ncol(train_data_2)] <- map_df(train_data_2[2:ncol(train_data_2)], as.numeric)
registerDoParallel(4,cores=4)
getDoParWorkers()
alg_sel <- multi_mods_test(train_data_2)
alg_sel[[2]]
### attempt to set up PDP
set.seed(42)
registerDoParallel(4)
getDoParWorkers()
modell <- train(Response~., data=train_data_2,
method='rf',
metric='ROC',
trControl= trainControl(method="repeatedcv",
number=10,
repeats=10,
summaryFunction=twoClassSummary,
savePredictions = TRUE,
classProbs = TRUE,
verboseIter = TRUE))
ab <- ALEPlot(train_data_2[, -1],
modell,
pred.fun = yhat,
J=9,
NA.plot = TRUE)
train_data_3 <- train_data_2
train_data_3$Response <- ifelse(train_data_3$Response == 'Good', 1, 0)
xplainer_rf <- DALEX::explain(model = modell,
data = train_data_2[, -1],
y = train_data_2$Response,
type='classification',
label='RF Model')
## attempt accumulated local effects plots to explain interaction of features in the plot
pd_rf <- model_profile(explainer = xplainer_rf,
type = "partial",
variables = names(train_data_3)[2:11])
ld_rf <- model_profile(explainer = xplainer_rf,
type       = "conditional",
variables  = names(train_data_3)[2:11])
ale_rf <- model_profile(explainer = xplainer_rf,
type='accumulated',
variables = names(train_data_3)[2:11])
pd_rf$agr_profiles$`_label_` = "partial dependence"
ld_rf$agr_profiles$`_label_` = "local dependence"
ale_rf$agr_profiles$`_label_` = "accumulated local"
plot(pd_rf, ld_rf, ale_rf)
xplainer_rf %>% model_parts() %>%
plot(show_boxplots = FALSE) +
ggtitle("Feature Importance ", "")
xplainer_rf %>%
predict_parts(new_observation = train_data_2) %>%
plot()
plot(ale_rf)
# Model performance ------
mod_5_guys <- model_performance(modell, test_data_2)
perf <- as.data.frame(mod_5_guys[[2]])
perf <- as.data.frame(t(mod_5_guys[[2]]))%>%
flextable_only()
perf
model_roc(mod_5_guys[[3]])
mod_5_guys[[4]]
metabolite_model_rfe <-modell
met_roc <- evalm(metabolite_model_rfe, gnames='Metabolites Only Model')
met_roc$cc
met_roc$roc
ml_eval_output <- as.data.frame(met_roc$stdres)
ml_eval_output$Measure <- rownames(ml_eval_output)
ml_eval_output <- back_2_front(ml_eval_output)
ml_eval_output <- flextable_only(ml_eval_output)
ml_eval_output
savehistory("~/University/MRC_DTP_in_Precision_Medicine/Project/RA/Taser_data/Analysis/taser_metabolomics/20210525_basis_predictor.Rhistory")
